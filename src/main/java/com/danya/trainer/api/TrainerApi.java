package com.danya.trainer.api;

import com.danya.exception.ErrorDto;
import com.danya.security.authentication.AuthUser;
import com.danya.trainer.dto.CreateTrainerDto;
import com.danya.trainer.dto.TrainerWithTraineesDto;
import com.danya.trainer.dto.UpdateTrainerDto;
import com.danya.training.dto.TrainerTrainingDto;
import com.danya.user.dto.CredentialsDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;

import java.time.LocalDate;
import java.util.List;

@Tag(name = "Trainers", description = "Trainer profile & training operations")
@SuppressWarnings("unused")
public interface TrainerApi {

    @Operation(
            summary = "Create trainer profile",
            description = "Creates a new trainer profile and returns autogenerated credentials.",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "201", description = "Created",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = CredentialsDto.class))),
                    @ApiResponse(responseCode = "400", description = "Validation error",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<CredentialsDto> createProfile(
            @RequestBody(
                    required = true,
                    description = "Trainer creation payload",
                    content = @Content(schema = @Schema(implementation = CreateTrainerDto.class))
            )
            CreateTrainerDto payload
    );

    @Operation(
            summary = "Get trainer profile by username (admin)",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = TrainerWithTraineesDto.class))),
                    @ApiResponse(responseCode = "400", description = "Validation error",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "404", description = "Not found",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<TrainerWithTraineesDto> getProfile(
            @Parameter(description = "Trainer username", required = true) String username
    );

    @Operation(
            summary = "Get own trainer profile",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = TrainerWithTraineesDto.class))),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<TrainerWithTraineesDto> getProfile(
            @Parameter(hidden = true) AuthUser authUser
    );

    @Operation(
            summary = "Update trainer profile by username (admin)",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = TrainerWithTraineesDto.class))),
                    @ApiResponse(responseCode = "400", description = "Validation error",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "404", description = "Not found",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<TrainerWithTraineesDto> updateProfile(
            @Parameter(description = "Trainer username", required = true) String username,
            @RequestBody(
                    required = true,
                    description = "Update trainer payload",
                    content = @Content(schema = @Schema(implementation = UpdateTrainerDto.class))
            )
            UpdateTrainerDto payload
    );

    @Operation(
            summary = "Update own trainer profile",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = TrainerWithTraineesDto.class))),
                    @ApiResponse(responseCode = "400", description = "Validation error",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<TrainerWithTraineesDto> updateProfile(
            @Parameter(hidden = true) AuthUser authUser,
            @RequestBody(
                    required = true,
                    description = "Update trainer payload",
                    content = @Content(schema = @Schema(implementation = UpdateTrainerDto.class))
            )
            UpdateTrainerDto payload
    );

    @Operation(
            summary = "List trainer trainings by username (admin)",
            description = "Filter by optional date range and trainee username.",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK",
                            content = @Content(mediaType = "application/json",
                                    array = @ArraySchema(schema = @Schema(implementation = TrainerTrainingDto.class)))),
                    @ApiResponse(responseCode = "400", description = "Validation error",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "404", description = "Trainer not found",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<List<TrainerTrainingDto>> getAllTrainerTrainings(
            @Parameter(description = "Trainer username", required = true) String username,
            @Parameter(description = "Inclusive start date (query param)") LocalDate fromDate,
            @Parameter(description = "Inclusive end date (query param)") LocalDate toDate,
            @Parameter(description = "Trainee username filter") String traineeUsername
    );

    @Operation(
            summary = "List own trainings (trainer)",
            description = "Filter by optional date range and trainee username.",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK",
                            content = @Content(mediaType = "application/json",
                                    array = @ArraySchema(schema = @Schema(implementation = TrainerTrainingDto.class)))),
                    @ApiResponse(responseCode = "400", description = "Validation error",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<List<TrainerTrainingDto>> getAllTrainerTrainings(
            @Parameter(hidden = true) AuthUser authUser,
            @Parameter(description = "Inclusive start date (query param)") LocalDate fromDate,
            @Parameter(description = "Inclusive end date (query param)") LocalDate toDate,
            @Parameter(description = "Trainee username filter") String traineeUsername
    );
}
