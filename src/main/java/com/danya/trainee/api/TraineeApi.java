package com.danya.trainee.api;

import com.danya.exception.ErrorDto;
import com.danya.security.authentication.AuthUser;
import com.danya.trainee.dto.CreateTraineeDto;
import com.danya.trainee.dto.TraineeProfileTrainerDto;
import com.danya.trainee.dto.TraineeWithTrainersDto;
import com.danya.trainee.dto.UpdateTraineeDto;
import com.danya.training.dto.TraineeTrainingDto;
import com.danya.user.dto.CredentialsDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;

import java.time.LocalDate;
import java.util.List;

@Tag(name = "Trainees", description = "Trainee profile & training operations")
@SuppressWarnings("unused")
public interface TraineeApi {

    @Operation(
            summary = "Create trainee profile",
            description = "Creates a new trainee profile and returns autogenerated credentials.",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "201", description = "Created",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = CredentialsDto.class))),
                    @ApiResponse(responseCode = "400", description = "Validation error",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
            }
    )
    ResponseEntity<CredentialsDto> createProfile(
            @RequestBody(
                    required = true,
                    description = "Trainee creation payload",
                    content = @Content(schema = @Schema(implementation = CreateTraineeDto.class))
            )
            CreateTraineeDto payload
    );

    @Operation(
            summary = "Get trainee profile by username (admin)",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = TraineeWithTrainersDto.class))),
                    @ApiResponse(responseCode = "400", description = "Validation error",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "404", description = "Not found",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<TraineeWithTrainersDto> getProfile(
            @Parameter(description = "Trainee username", required = true) String username,
            @Parameter(hidden = true) AuthUser authUser
    );

    @Operation(
            summary = "Get own trainee profile",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = TraineeWithTrainersDto.class))),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<TraineeWithTrainersDto> getProfile(
            @Parameter(hidden = true) AuthUser authUser
    );

    @Operation(
            summary = "Update trainee profile by username (admin)",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = TraineeWithTrainersDto.class))),
                    @ApiResponse(responseCode = "400", description = "Validation error",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "404", description = "Not found",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
            }
    )
    ResponseEntity<TraineeWithTrainersDto> updateProfile(
            @Parameter(description = "Trainee username", required = true) String username,
            @RequestBody(
                    required = true,
                    description = "Update trainee payload",
                    content = @Content(schema = @Schema(implementation = UpdateTraineeDto.class))
            )
            UpdateTraineeDto payload
    );

    @Operation(
            summary = "Update own trainee profile",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = TraineeWithTrainersDto.class))),
                    @ApiResponse(responseCode = "400", description = "Validation error",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
            }
    )
    ResponseEntity<TraineeWithTrainersDto> updateProfile(
            @RequestBody(
                    required = true,
                    description = "Update trainee payload",
                    content = @Content(schema = @Schema(implementation = UpdateTraineeDto.class))
            )
            UpdateTraineeDto payload,
            @Parameter(hidden = true) AuthUser authUser
    );

    @Operation(
            summary = "Delete trainee profile by username (admin)",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "204", description = "No Content"),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "404", description = "Not found",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<Void> deleteProfile(
            @Parameter(description = "Trainee username", required = true) String username
    );

    @Operation(
            summary = "Delete own trainee profile",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "204", description = "No Content"),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<Void> deleteProfile(
            @Parameter(hidden = true) AuthUser authUser
    );

    @Operation(
            summary = "List trainers not assigned to trainee (admin)",
            description = "Returns trainers not currently linked with the specified trainee.",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK",
                            content = @Content(mediaType = "application/json",
                                    array = @ArraySchema(schema = @Schema(implementation = TraineeProfileTrainerDto.class)))),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "404", description = "Not found",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<List<TraineeProfileTrainerDto>> getAvailableTrainers(
            @Parameter(description = "Trainee username", required = true) String username
    );

    @Operation(
            summary = "List trainee trainings by username (admin)",
            description = "Filter by optional date range, trainer username, and training type id.",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK",
                            content = @Content(mediaType = "application/json",
                                    array = @ArraySchema(schema = @Schema(implementation = TraineeTrainingDto.class)))),
                    @ApiResponse(responseCode = "400", description = "Validation error",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "404", description = "Trainee not found",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<List<TraineeTrainingDto>> getAllTraineeTrainings(
            @Parameter(description = "Trainee username", required = true) String username,
            @Parameter(description = "Inclusive start date (query param)") LocalDate fromDate,
            @Parameter(description = "Inclusive end date (query param)") LocalDate toDate,
            @Parameter(description = "Trainer username filter") String trainerUsername,
            @Parameter(description = "Training type id filter") Integer trainingTypeId
    );

    @Operation(
            summary = "List own trainings (trainee)",
            description = "Filter by optional date range, trainer username, and training type id.",
            security = @SecurityRequirement(name = "bearerAuth"),
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK",
                            content = @Content(mediaType = "application/json",
                                    array = @ArraySchema(schema = @Schema(implementation = TraineeTrainingDto.class)))),
                    @ApiResponse(responseCode = "400", description = "Validation error",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "401", description = "Unauthenticated",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class))),
                    @ApiResponse(responseCode = "403", description = "Insufficient role",
                            content = @Content(mediaType = "application/json",
                                    schema = @Schema(implementation = ErrorDto.class)))
            }
    )
    ResponseEntity<List<TraineeTrainingDto>> getAllTraineeTrainings(
            @Parameter(hidden = true) AuthUser authUser,
            @Parameter(description = "Inclusive start date (query param)") LocalDate fromDate,
            @Parameter(description = "Inclusive end date (query param)") LocalDate toDate,
            @Parameter(description = "Trainer username filter") String trainerUsername,
            @Parameter(description = "Training type id filter") Integer trainingTypeId
    );
}
